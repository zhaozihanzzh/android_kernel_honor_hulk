#ifndef __NPU_MANAGER_IOCTL_SERVICE_H
#define __NPU_MANAGER_IOCTL_SERVICE_H

/* manager */
#define DEVDRV_MANAGER_MAGIC                    'M'
#define DEVDRV_MANAGER_GET_PCIINFO		_IO(DEVDRV_MANAGER_MAGIC, 1)
#define DEVDRV_MANAGER_GET_DEVNUM		_IO(DEVDRV_MANAGER_MAGIC, 2)
#define DEVDRV_MANAGER_GET_PLATINFO 		_IO(DEVDRV_MANAGER_MAGIC, 3)
#define DEVDRV_MANAGER_SVMVA_TO_DEVID  	 	_IO(DEVDRV_MANAGER_MAGIC, 4)
#define DEVDRV_MANAGER_GET_CHANNELINFO		_IO(DEVDRV_MANAGER_MAGIC, 5)
#define DEVDRV_MANAGER_CONFIG_CQ    		_IO(DEVDRV_MANAGER_MAGIC, 6)
#define DEVDRV_MANAGER_DEVICE_STATUS    	_IO(DEVDRV_MANAGER_MAGIC, 7)
#define DEVDRV_MANAGER_IPC_EVENT_CREATE		_IO(DEVDRV_MANAGER_MAGIC, 8)
#define DEVDRV_MANAGER_IPC_EVENT_OPEN		_IO(DEVDRV_MANAGER_MAGIC, 9)
#define DEVDRV_MANAGER_IPC_EVENT_RECORD		_IO(DEVDRV_MANAGER_MAGIC, 10)
#define DEVDRV_MANAGER_IPC_EVENT_WAIT		_IO(DEVDRV_MANAGER_MAGIC, 11)
#define DEVDRV_MANAGER_IPC_EVENT_RECORD_COMPLETE  _IO(DEVDRV_MANAGER_MAGIC, 12)
#define DEVDRV_MANAGER_IPC_EVENT_WAIT_COMPLETE	_IO(DEVDRV_MANAGER_MAGIC, 13)
#define DEVDRV_MANAGER_IPC_EVENT_QUERY		_IO(DEVDRV_MANAGER_MAGIC, 14)
#define DEVDRV_MANAGER_IPC_EVENT_CLOSE		_IO(DEVDRV_MANAGER_MAGIC, 15)
#define DEVDRV_MANAGER_IPC_EVENT_DESTROY 	_IO(DEVDRV_MANAGER_MAGIC, 16)
#define DEVDRV_MANAGER_GET_CORE_SPEC		_IO(DEVDRV_MANAGER_MAGIC, 17)
#define DEVDRV_MANAGER_GET_CORE_INUSE		_IO(DEVDRV_MANAGER_MAGIC, 18)
#define DEVDRV_MANAGER_GET_DEVIDS		_IO(DEVDRV_MANAGER_MAGIC, 19)
#define DEVDRV_MANAGER_GET_DEVINFO		_IO(DEVDRV_MANAGER_MAGIC, 20)
#define DEVDRV_MANAGER_GET_PCIE_ID_INFO		_IO(DEVDRV_MANAGER_MAGIC, 21)
#define DEVDRV_MANAGER_GET_FLASH_COUNT		_IO(DEVDRV_MANAGER_MAGIC, 22)
#define DEVDRV_MANAGER_GET_FLASH_INFO		_IO(DEVDRV_MANAGER_MAGIC, 23)
#define DEVDRV_MANAGER_GET_VOLTAGE		_IO(DEVDRV_MANAGER_MAGIC, 24)
#define DEVDRV_MANAGER_GET_TEMPERATURE		_IO(DEVDRV_MANAGER_MAGIC, 25)
#define DEVDRV_MANAGER_GET_AI_USE_RATE		_IO(DEVDRV_MANAGER_MAGIC, 26)
#define DEVDRV_MANAGER_GET_FREQUENCY		_IO(DEVDRV_MANAGER_MAGIC, 27)
#define DEVDRV_MANAGER_GET_POWER		_IO(DEVDRV_MANAGER_MAGIC, 28)
#define DEVDRV_MANAGER_GET_HEALTH_CODE		_IO(DEVDRV_MANAGER_MAGIC, 29)
#define DEVDRV_MANAGER_GET_ERROR_CODE		_IO(DEVDRV_MANAGER_MAGIC, 30)
#define DEVDRV_MANAGER_GET_DDR_CAPACITY		_IO(DEVDRV_MANAGER_MAGIC, 31)
#define DEVDRV_MANAGER_LPM3_SMOKE		_IO(DEVDRV_MANAGER_MAGIC, 32)
#define DEVDRV_MANAGER_BLACK_BOX_GET_EXCEPTION  _IO(DEVDRV_MANAGER_MAGIC, 33)
#define DEVDRV_MANAGER_DEVICE_MEMORY_DUMP 	_IO(DEVDRV_MANAGER_MAGIC, 34)
#define DEVDRV_MANAGER_DEVICE_RESET_INFORM 	_IO(DEVDRV_MANAGER_MAGIC, 35)
#define DEVDRV_MANAGER_GET_MODULE_STATUS        _IO(DEVDRV_MANAGER_MAGIC, 36)
#define DEVDRV_MANAGER_GET_DEVICE_DMA_ADDR 	_IO(DEVDRV_MANAGER_MAGIC, 37)
#define DEVDRV_MANAGER_GET_INTERRUPT_INFO 	_IO(DEVDRV_MANAGER_MAGIC, 38)
#define DEVDRV_MANAGER_INTERRUPT_RECV_SIGNAL 	_IO(DEVDRV_MANAGER_MAGIC, 39)
#define DEVDRV_MANAGER_GPIOIRQ_REGISTER		_IO(DEVDRV_MANAGER_MAGIC, 40)
#define DEVDRV_MANAGER_GPIOIRQ_WAIT_INT		_IO(DEVDRV_MANAGER_MAGIC, 41)
#define DEVDRV_MANAGER_GET_MINI_DEVID 	        _IO(DEVDRV_MANAGER_MAGIC, 42)
#define DEVDRV_MANAGER_GET_MINI_BOARD_ID 	_IO(DEVDRV_MANAGER_MAGIC, 43)
#define DEVDRV_MANAGER_PCIE_PRE_RESET 		_IO(DEVDRV_MANAGER_MAGIC, 44)
#define DEVDRV_MANAGER_PCIE_RESCAN 		_IO(DEVDRV_MANAGER_MAGIC, 45)
#define DEVDRV_MANAGER_ALLOC_HOST_DMA_ADDR    	_IO(DEVDRV_MANAGER_MAGIC, 46)
#define DEVDRV_MANAGER_FREE_HOST_DMA_ADDR   	_IO(DEVDRV_MANAGER_MAGIC, 47)
#define DEVDRV_MANAGER_PCIE_SRAM_READ   	_IO(DEVDRV_MANAGER_MAGIC, 48)
#define DEVDRV_MANAGER_PCIE_SRAM_WRITE 		_IO(DEVDRV_MANAGER_MAGIC, 49)
#define DEVDRV_MANAGER_GET_USER_CONFIG  	_IO(DEVDRV_MANAGER_MAGIC, 50)
#define	DEVDRV_MANAGER_GET_EMMC_VOLTAGE		_IO(DEVDRV_MANAGER_MAGIC, 51)
#define	DEVDRV_MANAGER_GET_DEVICE_BOOT_STATUS	_IO(DEVDRV_MANAGER_MAGIC, 52)
#define	DEVDRV_MANAGER_ENABLE_EFUSE_LDO		_IO(DEVDRV_MANAGER_MAGIC, 53)
#define	DEVDRV_MANAGER_DISABLE_EFUSE_LDO		_IO(DEVDRV_MANAGER_MAGIC, 54)
#define	DEVDRV_MANAGER_GET_TSENSOR             _IO(DEVDRV_MANAGER_MAGIC, 55)
#define DEVDRV_MANAGER_CHECK_CANCEL_STATUS  _IO(DEVDRV_MANAGER_MAGIC, 56)
#define DEVDRV_MANAGER_DFX_CMD              _IO(DEVDRV_MANAGER_MAGIC, 57)
#define DEVDRV_MANAGER_CONTAINER_CMD        _IO(DEVDRV_MANAGER_MAGIC, 58)
#define	DEVDRV_MANAGER_GET_HOST_PHY_MACH_FLAG	_IO(DEVDRV_MANAGER_MAGIC, 59)
#define DEVDRV_MANAGER_LOAD_KERNEL_LIB _IO(DEVDRV_MANAGER_MAGIC, 60)
#define DEVDRV_MANAGER_GET_KERNEL_LIB _IO(DEVDRV_MANAGER_MAGIC, 61)
#define DEVDRV_MANAGER_GET_LOCAL_DEVICEIDS	_IO(DEVDRV_MANAGER_MAGIC, 62)
#define DEVDRV_MANAGER_IMU_SMOKE		_IO(DEVDRV_MANAGER_MAGIC, 63)
#define DEVDRV_MANAGER_SYSTEM_RDY_CHECK	_IO(DEVDRV_MANAGER_MAGIC, 64)
#define DEVDRV_MANAGER_IPC_NOTIFY_CREATE	_IO(DEVDRV_MANAGER_MAGIC, 65)
#define DEVDRV_MANAGER_IPC_NOTIFY_OPEN		_IO(DEVDRV_MANAGER_MAGIC, 66)
#define DEVDRV_MANAGER_IPC_NOTIFY_CLOSE	_IO(DEVDRV_MANAGER_MAGIC, 67)
#define DEVDRV_MANAGER_IPC_NOTIFY_DESTROY 	_IO(DEVDRV_MANAGER_MAGIC, 68)
#define DEVDRV_MANAGER_GET_NEW_TIME      	_IO(DEVDRV_MANAGER_MAGIC, 69)
#define DEVDRV_MANAGER_CONFIG_DISABLE_WAKELOCK    		_IO(DEVDRV_MANAGER_MAGIC, 70)
#define DEVDRV_MANAGER_PCIE_DDR_READ   	_IO(DEVDRV_MANAGER_MAGIC, 71)
#define DEVDRV_MANAGER_PCIE_DDR_WRITE   	_IO(DEVDRV_MANAGER_MAGIC, 72)
#define DEVDRV_MANAGER_GET_TRANSWAY		_IO(DEVDRV_MANAGER_MAGIC, 73)
#define DEVDRV_MANAGER_GET_CPU_INFO		_IO(DEVDRV_MANAGER_MAGIC, 74)
#define DEVDRV_MANAGER_CMD_MAX_NR 		    (75)


#define DEVDRV_CTRL_CPU_ID 			(0x41D05)

enum hccl_trans_way {
	DRV_SDMA = 0x0,
	DRV_PCIE_DMA,
};

// TODO: include devdrv head file later!! will delete
struct devdrv_device_info {
	u8 env_type;

	u8 ai_cpu_ready_num;
	u8 ai_cpu_broken_map;
	u8 ai_core_ready_num;
	u8 ai_core_broken_map;
	u8 ai_subsys_ip_map;

	u32 ctrl_cpu_ip;
	u32 ctrl_cpu_id;
	u32 ctrl_cpu_core_num;
	u32 ctrl_cpu_endian_little;
	u32 ts_cpu_core_num;
	u32 ai_cpu_core_num;
	u32 ai_core_num;
	u32 ai_cpu_core_id;
	u32 ai_core_id;
	u32 aicpu_occupy_bitmap;

	u32 ts_load_fail;

	u32 min_sq_id;
	u32 max_sq_id;
	u32 min_cq_id;
	u32 max_cq_id;
	u32 min_stream_id;
	u32 max_stream_id;
	u32 min_event_id;
	u32 max_event_id;

	u32 res[5];
};


long devdrv_manager_ioctl(  struct file *filep,
							unsigned int cmd,
							unsigned long arg);
#endif /*__DEVDRV_MANAGER_H*/
